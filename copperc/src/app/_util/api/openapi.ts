/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/attr/add": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new attribute */
		post: operations["add_attr"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/attr/del": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Delete an attribute */
		delete: operations["del_attr"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/attr/find": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Find an attribute by name */
		get: operations["find_attr"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/attr/get": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get a single attribute's info */
		get: operations["get_attr"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/attr/rename": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new class */
		post: operations["rename_attr"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/group/add": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new group */
		post: operations["add_group"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/group/del": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Delete a group */
		delete: operations["del_group"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/group/list": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** List all groups */
		get: operations["list_group"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/group/rename": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new user */
		post: operations["rename_group"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/login": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Try to log in */
		post: operations["try_login"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/logout": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Terminate this session */
		post: operations["logout"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/me": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get logged in user's info */
		get: operations["get_me"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/user/add": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new user */
		post: operations["add_user"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/user/del": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Delete a user */
		delete: operations["del_user"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/auth/user/rename": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new user */
		post: operations["rename_user"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/class/add": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new class */
		post: operations["add_class"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/class/del": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Delete a class and all data associated with it */
		delete: operations["del_class"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/class/get": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get class info by id */
		get: operations["get_class"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/class/list": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get this dataset's classes */
		get: operations["list_classes"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/class/rename": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new class */
		post: operations["rename_class"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/dataset/add": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new dataset */
		post: operations["add_dataset"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/dataset/del": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Delete a dataset */
		delete: operations["del_dataset"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/dataset/list": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all datasets */
		get: operations["list_datasets"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/dataset/rename": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Delete a dataset */
		post: operations["rename_dataset"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/item/attr": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get an item's attribute value as raw data */
		get: operations["get_item_attr"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/item/get": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get a specific item in this class */
		get: operations["get_item"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/item/list": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** List all items in a class */
		get: operations["list_item"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/pipeline/get": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get details about a pipeline */
		get: operations["get_pipeline"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/pipeline/list": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get all pipelines */
		get: operations["list_pipelines"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/pipeline/run": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Start a pipeline job */
		post: operations["run_pipeline"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/status": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get server status */
		get: operations["get_server_status"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/status/runner": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get information about this server's pipeline runner */
		get: operations["get_runner_status"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/status/runner/completed": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get a list of completed pipeline jobs */
		get: operations["get_runner_completed"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/upload/new": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Start an upload job and return its handle */
		post: operations["start_upload"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/upload/{job_id}/newfile": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Start a file inside an upload job and return its handle */
		post: operations["start_file"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/upload/{job_id}/{file_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Upload a fragment of a file */
		post: operations["upload"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/upload/{job_id}/{file_id}/finish": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Finish a file upload */
		post: operations["finish_file"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/** @description Input that is passed to the pipeline we're running */
		AddJobInput: {
			/** @description The file to run this pipeline with */
			file_name: string;
			/** @enum {string} */
			type: "File";
			/** @description The upload job we uploaded a file to */
			upload_job: string;
		};
		AddJobParams: components["schemas"]["PipelineSelect"] & {
			input: {
				[key: string]: components["schemas"]["AddJobInput"] | undefined;
			};
		};
		AddgroupRequest: {
			name: string;
			parent: components["schemas"]["GroupId"];
		};
		AdduserRequest: {
			group: components["schemas"]["GroupId"];
			password: string;
			username: string;
		};
		AttrInfo: {
			/** Format: int32 */
			class: number;
			data_type: components["schemas"]["MetastoreDataStub"];
			/** Format: int32 */
			handle: number;
			/** Format: int32 */
			idx: number;
			name: string;
		};
		AttributeOptions: {
			unique: boolean;
		};
		BlobHandle: {
			/** Format: int32 */
			id: number;
		};
		ClassGetRequest: {
			/** Format: int32 */
			class: number;
			dataset: string;
		};
		ClassInfo: {
			/** Format: int32 */
			handle: number;
			name: string;
		};
		/** @description Completed pipeline job status */
		CompletedJobStatus: {
			/** @description A pretty string that identifies this job by its input */
			input_exemplar: string;
			/** @description This job's id */
			job_id: number;
			/** @description The pipeline this job ran */
			pipeline: string;
		};
		/** @description Immutable bits of data inside a pipeline.
		 *
		 *     Cloning [`CopperData`] should be very fast. Consider wrapping
		 *     big containers in an [`Arc`].
		 *
		 *     Any variant that has a "deserialize" implementation
		 *     may be used as a parameter in certain nodes.
		 *     (for example, the `Constant` node's `value` field)
		 *
		 *     This is very similar to [`MetastoreData`]. In fact, we often convert between the two.
		 *     We can't use [`MetastoreData`] everywhere, though... Data inside a pipeline is represented
		 *     slightly differently than data inside a metastore. (For example, look at the `Blob` variant.
		 *     In a metastore, `Blob`s are always stored in a blobstore. Here, they are given as streams.)
		 *
		 *     Also, some types that exist here cannot exist inside a metastore (for example, `Path`, which
		 *     represents a file path that is available when the pipeline is run. This path may vanish later.) */
		CopperData:
			| {
					/** @enum {string} */
					data_type: "Text";
					value: string;
			  }
			| {
					/** @enum {string} */
					data_type: "Integer";
					is_non_negative: boolean;
					/** Format: int64 */
					value: number;
			  }
			| {
					/** @enum {string} */
					data_type: "Boolean";
					value: boolean;
			  }
			| {
					/** @enum {string} */
					data_type: "Float";
					is_non_negative: boolean;
					/** Format: double */
					value: number;
			  }
			| {
					/**
					 * Format: int32
					 * @description The item class this
					 */
					class: number;
					/** @enum {string} */
					data_type: "Reference";
					/**
					 * Format: int32
					 * @description The item
					 */
					item: number;
			  };
		CopperDataStub:
			| {
					/** @enum {string} */
					stub_type: "Text";
			  }
			| {
					/** @enum {string} */
					stub_type: "Bytes";
			  }
			| {
					is_non_negative: boolean;
					/** @enum {string} */
					stub_type: "Integer";
			  }
			| {
					is_non_negative: boolean;
					/** @enum {string} */
					stub_type: "Float";
			  }
			| {
					/** @enum {string} */
					stub_type: "Boolean";
			  }
			| {
					hash_type: components["schemas"]["HashType"];
					/** @enum {string} */
					stub_type: "Hash";
			  }
			| {
					/** Format: int32 */
					class: number;
					/** @enum {string} */
					stub_type: "Reference";
			  };
		/** @description Dataset info */
		DatasetInfoShort: {
			ds_type: components["schemas"]["DatasetType"];
			/** @description This dataset's name */
			name: string;
		};
		/**
		 * @description All types of dataset implementations we provide in this crate
		 *
		 *     We use this to keep track of dataset types in our db,
		 *     and in some API endpoints.
		 * @enum {string}
		 */
		DatasetType: "Local";
		DelAttrRequest: {
			/** Format: int32 */
			attr: number;
			dataset: string;
		};
		DelClassRequest: {
			/** Format: int32 */
			class: number;
			dataset: string;
		};
		DeleteDatasetRequest: {
			/** @description The dataset to delete from. */
			dataset_name: string;
		};
		DelgroupRequest: {
			/** Format: int32 */
			group: number;
		};
		DeluserRequest: {
			/** Format: int32 */
			user: number;
		};
		ExtendedClassInfo: {
			/** @description This class' attributes */
			attrs: components["schemas"]["AttrInfo"][];
			/**
			 * Format: int32
			 * @description This class' unique handle
			 */
			handle: number;
			/** @description This class' name */
			name: string;
		};
		FindAttrRequest: {
			attr_name: string;
			/** Format: int32 */
			class: number;
			dataset: string;
		};
		GetAttrRequest: {
			/** Format: int32 */
			attr: number;
			dataset: string;
		};
		GroupId:
			| {
					/** @enum {string} */
					type: "RootGroup";
			  }
			| {
					/** Format: int32 */
					id: number;
					/** @enum {string} */
					type: "Group";
			  };
		GroupInfo: {
			id: components["schemas"]["GroupId"];
			name: string;
			parent?: Omit<components["schemas"]["GroupId"], "type"> | null;
		};
		/** @enum {string} */
		HashType: "MD5" | "SHA256" | "SHA512";
		ItemGetRequest: {
			/** Format: int32 */
			class: number;
			dataset: string;
			/** Format: int32 */
			item: number;
		};
		ItemListData:
			| {
					attr: components["schemas"]["AttrInfo"];
					is_non_negative: boolean;
					/** @enum {string} */
					type: "Integer";
					/** Format: int64 */
					value?: number | null;
			  }
			| {
					attr: components["schemas"]["AttrInfo"];
					is_non_negative: boolean;
					/** @enum {string} */
					type: "Float";
					/** Format: double */
					value?: number | null;
			  }
			| {
					attr: components["schemas"]["AttrInfo"];
					/** @enum {string} */
					type: "Boolean";
					value?: boolean | null;
			  }
			| {
					attr: components["schemas"]["AttrInfo"];
					/** @enum {string} */
					type: "Text";
					value?: string | null;
			  }
			| {
					attr: components["schemas"]["AttrInfo"];
					/** Format: int32 */
					class: number;
					/** Format: int32 */
					item?: number | null;
					/** @enum {string} */
					type: "Reference";
			  }
			| {
					attr: components["schemas"]["AttrInfo"];
					hash_type: components["schemas"]["HashType"];
					/** @enum {string} */
					type: "Hash";
					value?: string | null;
			  }
			| {
					attr: components["schemas"]["AttrInfo"];
					mime?: string | null;
					/** Format: int64 */
					size?: number | null;
					/** @enum {string} */
					type: "Binary";
			  }
			| {
					attr: components["schemas"]["AttrInfo"];
					handle?: components["schemas"]["BlobHandle"] | null;
					mime?: string | null;
					/** Format: int64 */
					size?: number | null;
					/** @enum {string} */
					type: "Blob";
			  };
		ItemListItem: {
			attrs: {
				[key: string]: components["schemas"]["ItemListData"] | undefined;
			};
			/** Format: int32 */
			idx: number;
		};
		ItemListRequest: {
			/** Format: int32 */
			class: number;
			dataset: string;
			/**
			 * Format: int32
			 * @description How many items to list per page
			 */
			page_size: number;
			/**
			 * Format: int32
			 * @description The index of the first item to return
			 */
			start_at: number;
		};
		ItemListResponse: {
			count: number;
			items: components["schemas"]["ItemListItem"][];
			/** Format: int32 */
			start_at: number;
			/** Format: int32 */
			total: number;
		};
		ListgroupInfo: {
			group_info: components["schemas"]["GroupInfo"];
			users: components["schemas"]["UserInfo"][];
		};
		LoginRequest: {
			password: string;
			username: string;
		};
		MetastoreDataStub:
			| {
					/** @enum {string} */
					type: "Text";
			  }
			| {
					/** @enum {string} */
					type: "Binary";
			  }
			| {
					/** @enum {string} */
					type: "Blob";
			  }
			| {
					is_non_negative: boolean;
					/** @enum {string} */
					type: "Integer";
			  }
			| {
					is_non_negative: boolean;
					/** @enum {string} */
					type: "Float";
			  }
			| {
					/** @enum {string} */
					type: "Boolean";
			  }
			| {
					hash_type: components["schemas"]["HashType"];
					/** @enum {string} */
					type: "Hash";
			  }
			| {
					/** Format: int32 */
					class: number;
					/** @enum {string} */
					type: "Reference";
			  };
		NewAttrParams: {
			/** Format: int32 */
			class: number;
			data_type: components["schemas"]["MetastoreDataStub"];
			dataset: string;
			new_attr_name: string;
			options: components["schemas"]["AttributeOptions"];
		};
		NewClassRequest: {
			dataset: string;
			new_class_name: string;
		};
		/** @description Types of datasets we support, with options */
		NewDatasetParams: {
			/** @enum {string} */
			type: "Local";
		};
		NewDatasetRequest: {
			name: string;
			params: components["schemas"]["NewDatasetParams"];
		};
		/** @description A pipeline specification */
		PipelineInfo: components["schemas"]["PipelineInfoShort"] & {
			/** @description A list of nodes in this pipeline */
			nodes: string[];
		};
		/** @description A pipeline specification */
		PipelineInfoShort: {
			/** @description If true, we couldn't load this pipeline successfully. */
			has_error: boolean;
			/** @description The input this pipeline takes */
			inputs: {
				[key: string]: components["schemas"]["CopperDataStub"] | undefined;
			};
			/** @description This pipeline's name */
			name: string;
		};
		PipelineListRequest: {
			/** @description Which dataset's pipelines we want to list */
			dataset: string;
		};
		PipelineSelect: {
			dataset: string;
			pipeline: string;
		};
		RenameAttrRequest: {
			/** Format: int32 */
			attr: number;
			dataset: string;
			new_name: string;
		};
		RenameClassRequest: {
			/** Format: int32 */
			class: number;
			dataset: string;
			new_name: string;
		};
		RenameDatasetRequest: {
			new_name: string;
			old_name: string;
		};
		RenameGroupRequest: {
			group: components["schemas"]["GroupId"];
			new_name: string;
		};
		RenameUserRequest: {
			new_name: string;
			user: components["schemas"]["UserId"];
		};
		/** @description This server's pipeline runner status */
		RunnerStatus: {
			/** @description How many jobs have failed */
			failed_jobs: number;
			/** @description How many jobs have been finished? */
			finished_jobs: number;
			/** @description How many jobs are queued to run? */
			queued_jobs: number;
			/** @description What jobs are running right now? */
			running_jobs: components["schemas"]["RunningJobStatus"][];
		};
		/** @description A running pipeline job's status */
		RunningJobStatus: {
			/** @description This pipeline's input, converted to a pretty string.
			 *     Context-dependent. */
			input_exemplar: string;
			/** @description This job's id */
			job_id: number;
			/** @description The status of each node in this pipeline */
			node_status: components["schemas"]["RunningNodeStatus"][];
			/** @description The pipeline this job is running */
			pipeline: string;
		};
		/** @description A running node's state */
		RunningNodeState:
			| {
					/** @description Why this node is pending */
					message: string;
					/** @enum {string} */
					type: "Pending";
			  }
			| {
					/** @enum {string} */
					type: "Running";
			  }
			| {
					/** @enum {string} */
					type: "Done";
			  };
		/** @description The state of a node in a running pipeline */
		RunningNodeStatus: {
			/** @description This node's name */
			name: string;
			state: components["schemas"]["RunningNodeState"];
		};
		/** @description The server's status */
		ServerStatus: {
			/**
			 * @description The maximum request size this server supports, in bytes
			 * @example 2000000
			 */
			request_body_limit: number;
			/**
			 * @description This server's version
			 * @example 0.1.0
			 */
			version: string;
		};
		/** @description Parameters to finish an uploading file */
		UploadFinish: {
			/**
			 * Format: int32
			 * @description The total number of fragments this file should have
			 */
			frag_count: number;
			/** @description The hash of this complete file */
			hash: string;
		};
		UploadFragmentMetadata: {
			part_hash: string;
			/** Format: int32 */
			part_idx: number;
		};
		/** @description A freshly-started upload file's parameters */
		UploadNewFileResult: {
			/** @description This file's name */
			file_id: string;
		};
		/** @description Parameters to start a new file */
		UploadStartInfo: {
			/** @description This file's name, used to determine its mime type */
			file_name: string;
		};
		/** @description A freshly-started upload job's parameters */
		UploadStartResult: {
			/** @description This upload job's id */
			job_id: string;
		};
		UserId: {
			/** Format: int32 */
			id: number;
		};
		UserInfo: {
			group: components["schemas"]["GroupInfo"];
			id: components["schemas"]["UserId"];
			name: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	add_attr: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["NewAttrParams"];
			};
		};
		responses: {
			/** @description Successfully created new attribute */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not create new attribute, bad parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Bad dataset or class */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	del_attr: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DelAttrRequest"];
			};
		};
		responses: {
			/** @description Successfully deleted attribute */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Bad dataset, class, or attribute */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	find_attr: {
		parameters: {
			query: {
				dataset: string;
				class: number;
				attr_name: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Attribute info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AttrInfo"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not find attribute */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	get_attr: {
		parameters: {
			query: {
				dataset: string;
				attr: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Attribute info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AttrInfo"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Bad dataset or attribute */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	rename_attr: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RenameAttrRequest"];
			};
		};
		responses: {
			/** @description Successfully renamed this attr */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not rename attr, bad parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Bad dataset */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	add_group: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddgroupRequest"];
			};
		};
		responses: {
			/** @description Successfully created group */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not create group */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	del_group: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DelgroupRequest"];
			};
		};
		responses: {
			/** @description Successfully deleted group */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not delete group */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	list_group: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List of groups */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ListgroupInfo"][];
				};
			};
			/** @description Could not list groups */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	rename_group: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RenameGroupRequest"];
			};
		};
		responses: {
			/** @description Successfully renamed group */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not rename group */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	try_login: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["LoginRequest"];
			};
		};
		responses: {
			/** @description Successfully logged in */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Could not log in */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	logout: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successfully terminated session */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not log out */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	get_me: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UserInfo"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	add_user: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AdduserRequest"];
			};
		};
		responses: {
			/** @description Successfully created user */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not create user */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	del_user: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DeluserRequest"];
			};
		};
		responses: {
			/** @description Successfully deleted user */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not delete user */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	rename_user: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RenameUserRequest"];
			};
		};
		responses: {
			/** @description Successfully renamed user */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not rename user */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	add_class: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["NewClassRequest"];
			};
		};
		responses: {
			/** @description Successfully created new class */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not create new class, bad parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Bad dataset */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	del_class: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DelClassRequest"];
			};
		};
		responses: {
			/** @description Successfully deleted this class */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid dataset or class */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	get_class: {
		parameters: {
			query: {
				dataset: string;
				class: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Class info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ExtendedClassInfo"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid dataset or class */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	list_classes: {
		parameters: {
			query: {
				dataset: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Classes */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ExtendedClassInfo"][];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	rename_class: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RenameClassRequest"];
			};
		};
		responses: {
			/** @description Successfully renamed this class */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not rename class, bad parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Bad dataset */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	add_dataset: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["NewDatasetRequest"];
			};
		};
		responses: {
			/** @description Dataset created successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not create dataset */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	del_dataset: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DeleteDatasetRequest"];
			};
		};
		responses: {
			/** @description Dataset deleted successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not delete dataset */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	list_datasets: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Dataset info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DatasetInfoShort"][];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	rename_dataset: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RenameDatasetRequest"];
			};
		};
		responses: {
			/** @description Dataset renamed successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not rename dataset */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	get_item_attr: {
		parameters: {
			query: {
				dataset: string;
				attr: number;
				item_idx: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Item data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Could not get this attribute */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid dataset, class, or item */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	get_item: {
		parameters: {
			query: {
				dataset: string;
				class: number;
				item: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Item information */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ItemListItem"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unknown dataset, class, or item */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	list_item: {
		parameters: {
			query: {
				dataset: string;
				class: number;
				/** @description How many items to list per page */
				page_size: number;
				/** @description The index of the first item to return */
				start_at: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Items */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ItemListResponse"];
				};
			};
			/** @description Could not list items bad parameters */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unknown dataset or class name */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	get_pipeline: {
		parameters: {
			query: {
				dataset: string;
				pipeline: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Pipeline info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PipelineInfo"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description There is no such pipeline or database */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	list_pipelines: {
		parameters: {
			query: {
				/** @description Which dataset's pipelines we want to list */
				dataset: string;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Pipeline info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PipelineInfoShort"][];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description This dataset doesn't exist */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Could not load pipeline */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	run_pipeline: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["AddJobParams"];
			};
		};
		responses: {
			/** @description Job started successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PipelineInfo"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid dataset or pipeline */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	get_server_status: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Server status */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ServerStatus"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	get_runner_status: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Pipeline runner status */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["RunnerStatus"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	get_runner_completed: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Completed jobs */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["CompletedJobStatus"][];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	start_upload: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description New upload info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UploadStartResult"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal error, check server logs. Should not appear during normal operation. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	start_file: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Upload job id */
				job_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UploadStartInfo"];
			};
		};
		responses: {
			/** @description New file info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UploadNewFileResult"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description This job id doesn't exist */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal error, check server logs. Should not appear during normal operation. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	upload: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Upload job id */
				job_id: string;
				/** @description Upload file name */
				file_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Fragment uploaded successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Malformed request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Job or file id does not exist */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal error, check server logs. Should not appear during normal operation. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	finish_file: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Upload job id */
				job_id: string;
				/** @description Upload file name */
				file_id: string;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UploadFinish"];
			};
		};
		responses: {
			/** @description File finished successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Malformed request or unfinished upload */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Bad job or file id */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal error, check server logs. Should not appear during normal operation. */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
}
