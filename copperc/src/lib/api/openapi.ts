/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/attribute/{attribute_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get attribute info */
		get: operations["get_attribute"];
		put?: never;
		post?: never;
		/** Delete a attribute */
		delete: operations["del_attribute"];
		options?: never;
		head?: never;
		/** Rename a attribute */
		patch: operations["rename_attribute"];
		trace?: never;
	};
	"/class/{class_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get class info */
		get: operations["get_class"];
		put?: never;
		post?: never;
		/** Delete a class */
		delete: operations["del_class"];
		options?: never;
		head?: never;
		/** Rename a class */
		patch: operations["rename_class"];
		trace?: never;
	};
	"/class/{class_id}/attribute": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new attribute */
		post: operations["add_attribute"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/class/{class_id}/items": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** List items in this class */
		get: operations["list_items"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/dataset": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new dataset */
		post: operations["add_dataset"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/dataset/list": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get dataset info */
		get: operations["list_datasets"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/dataset/{dataset_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get dataset info */
		get: operations["get_dataset"];
		put?: never;
		post?: never;
		/** Delete a dataset */
		delete: operations["del_dataset"];
		options?: never;
		head?: never;
		/** Rename a dataset */
		patch: operations["rename_dataset"];
		trace?: never;
	};
	"/dataset/{dataset_id}/class": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new class */
		post: operations["add_class"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/item/{item_idx}/attr/{attr_idx}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get the value of an item's attribute */
		get: operations["get_attr"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/job/list": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** List the logged in user's jobs */
		get: operations["list_jobs"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/login": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Try to log in */
		post: operations["try_login"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/logout": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Terminate this session */
		post: operations["logout"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/pipeline": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new pipeline */
		post: operations["add_pipeline"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/pipeline/list": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** List the logged in user's pipelines */
		get: operations["list_pipelines"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/pipeline/{pipeline_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get pipeline by id */
		get: operations["get_pipeline"];
		put?: never;
		post?: never;
		/** Delete a pipeline */
		delete: operations["del_pipeline"];
		options?: never;
		head?: never;
		/** Update a pipeline */
		patch: operations["update_pipeline"];
		trace?: never;
	};
	"/pipeline/{pipeline_id}/run": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Start a pipeline job */
		post: operations["run_pipeline"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/storage/upload": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Rename a attribute */
		post: operations["start_upload"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/storage/upload/{upload_id}/finish": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Rename a attribute */
		post: operations["finish_upload"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/storage/upload/{upload_id}/part": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Upload a part of a file.
		 *     TODO: enforce 5MB minimum size */
		post: operations["upload_part"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/user": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/** Create a new User */
		post: operations["add_user"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/user/me": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/** Get logged in user info */
		get: operations["get_me"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/user/{user_id}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/** Delete a User */
		delete: operations["del_user"];
		options?: never;
		head?: never;
		/** Update a user */
		patch: operations["update_user"];
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		/** @description Attribute data, provided by the user by api calls. */
		ApiInputAttrData:
			| {
					/** @enum {string} */
					type: "Text";
					value: string;
			  }
			| {
					/** @description If true, this integer must be non-negative */
					is_non_negative: boolean;
					/** @enum {string} */
					type: "Integer";
					/**
					 * Format: int64
					 * @description The integer
					 */
					value: number;
			  }
			| {
					/** @description If true, this float must be non-negative */
					is_non_negative: boolean;
					/** @enum {string} */
					type: "Float";
					/**
					 * Format: double
					 * @description The float
					 */
					value: number;
			  }
			| {
					/** @enum {string} */
					type: "Boolean";
					value: boolean;
			  }
			| {
					/**
					 * Format: binary
					 * @description The hash data
					 */
					data: string;
					hash_type: components["schemas"]["HashType"];
					/** @enum {string} */
					type: "Hash";
			  }
			| {
					/** @enum {string} */
					type: "Blob";
					/** @description The upload id. This must only be used once,
					 *     uploaded files are deleted once their job is done.
					 *
					 *     Also, note that we _never_ send the S3 key to the
					 *     client---only the upload id as a proxy. This makes sure
					 *     that clients can only start jobs on uploads they own,
					 *     and reduces the risk of other creative abuse. */
					upload_id: string;
			  }
			| {
					/**
					 * Format: int64
					 * @description The item class this reference points to
					 */
					class: number;
					/**
					 * Format: int64
					 * @description The item
					 */
					item: number;
					/** @enum {string} */
					type: "Reference";
			  };
		/** @description The type of data stored in an attribute.
		 *     Each of these corresponds to a variant of [`AttrData`] */
		AttrDataStub:
			| {
					/** @enum {string} */
					type: "Text";
			  }
			| {
					/** @enum {string} */
					type: "Blob";
			  }
			| {
					/** @description If true, this integer must be non-negative */
					is_non_negative: boolean;
					/** @enum {string} */
					type: "Integer";
			  }
			| {
					/** @description If true, this float must be non-negative */
					is_non_negative: boolean;
					/** @enum {string} */
					type: "Float";
			  }
			| {
					/** @enum {string} */
					type: "Boolean";
			  }
			| {
					hash_type: components["schemas"]["HashType"];
					/** @enum {string} */
					type: "Hash";
			  }
			| {
					/**
					 * Format: int64
					 * @description The class we reference
					 */
					class: number;
					/** @enum {string} */
					type: "Reference";
			  };
		/** @description Attribute information */
		AttributeInfo: {
			/**
			 * Format: int64
			 * @description The class this attribute belongs to
			 */
			class: number;
			data_type: components["schemas"]["AttrDataStub"];
			/**
			 * Format: int64
			 * @description The id of this attribute
			 */
			id: number;
			/** @description This attribute's name */
			name: string;
			options: components["schemas"]["AttributeOptions"];
			/**
			 * Format: int64
			 * @description The order of this attribute in its class.
			 *     These start at 0, and must be unique & consecutive
			 *     inside any class.
			 */
			order: number;
		};
		/** @description Options we can set when creating an attribute */
		AttributeOptions: {
			/** @description If true, this attribute must have a value */
			is_not_null: boolean;
			/** @description If true, this attribute must be unique within its column */
			is_unique: boolean;
		};
		/** @description Class information */
		ClassInfo: {
			attributes: components["schemas"]["AttributeInfo"][];
			/**
			 * Format: int64
			 * @description The dataset this class is in
			 */
			dataset: number;
			/**
			 * Format: int64
			 * @description The id of the class
			 */
			id: number;
			/** Format: int64 */
			item_count: number;
			/** @description This class' name */
			name: string;
		};
		/** @description Dataset information */
		DatasetInfo: {
			/** @description This dataset's classes */
			classes: components["schemas"]["ClassInfo"][];
			/**
			 * Format: int64
			 * @description The id of this dataset
			 */
			id: number;
			/** @description This dataset's name */
			name: string;
			/**
			 * Format: int64
			 * @description The id of the user that owns this dataset
			 */
			owner: number;
		};
		EdgeJson: {
			source: components["schemas"]["OutputPort"];
			target: components["schemas"]["InputPort"];
		};
		/**
		 * @description The types of hashes we support
		 * @enum {string}
		 */
		HashType: "MD5" | "SHA256" | "SHA512";
		InputPort: {
			/** @description The node that provides this input */
			node: string;
			/** @description The port's name */
			port: string;
		};
		/** @description Attribute data returned to the user */
		ItemAttrData:
			| {
					/** @enum {string} */
					type: "Text";
					value: string;
			  }
			| {
					/** @enum {string} */
					type: "Integer";
					/** Format: int64 */
					value: number;
			  }
			| {
					/** @enum {string} */
					type: "Float";
					/** Format: double */
					value: number;
			  }
			| {
					/** @enum {string} */
					type: "Boolean";
					value: boolean;
			  }
			| {
					/** @enum {string} */
					type: "Hash";
					value: string;
			  }
			| {
					mime: string;
					/** Format: int64 */
					size?: number | null;
					/** @enum {string} */
					type: "Blob";
			  }
			| {
					/** Format: int64 */
					class: number;
					/** Format: int64 */
					item: number;
					primary_attr: components["schemas"]["PrimaryAttrData"];
					/** @enum {string} */
					type: "Reference";
			  };
		ItemListResponse: {
			items: components["schemas"]["ItemlistItemInfo"][];
			/** Format: int64 */
			skip: number;
			/** Format: int64 */
			total: number;
		};
		ItemlistItemInfo: {
			/** @description All attributes this item has */
			attribute_values: {
				[key: string]: components["schemas"]["ItemAttrData"];
			};
			/**
			 * Format: int64
			 * @description The class this item belongs to
			 */
			class: number;
			/**
			 * Format: int64
			 * @description The id of this item
			 */
			id: number;
		};
		LoginRequest: {
			email: string;
			password: string;
		};
		NewAttributeRequest: {
			data_type: components["schemas"]["AttrDataStub"];
			name: string;
			options: components["schemas"]["AttributeOptions"];
		};
		NewClassRequest: {
			name: string;
		};
		NewDatasetRequest: {
			name: string;
		};
		NewPipelineRequest: {
			name: string;
			pipeline: components["schemas"]["PipelineJson"];
		};
		NewUserRequest: {
			email: string;
			name: string;
			password: string;
		};
		NodeJson: {
			/** @description What kind of node is this? */
			node_type: string;
			params?: {
				[key: string]: components["schemas"]["NodeParameterValue"];
			};
			position: components["schemas"]["NodeJsonPosition"];
		};
		NodeJsonPosition: {
			/** Format: double */
			x: number;
			/** Format: double */
			y: number;
		};
		/** @description The types of node parameters we accept */
		NodeParameterValue:
			| {
					/** @enum {string} */
					parameter_type: "Boolean";
					/** @description A yes or a no */
					value: boolean;
			  }
			| {
					/** @enum {string} */
					parameter_type: "Integer";
					/**
					 * Format: int64
					 * @description An integer
					 */
					value: number;
			  }
			| {
					/** @enum {string} */
					parameter_type: "String";
					/** @description A plain string. This is used to carry the value of both
					 *     `String` and `Enum` types. If an `Enum` parameter receives
					 *     a string it doesn't recognize, an error should be thrown. */
					value: string;
			  }
			| {
					/** @enum {string} */
					parameter_type: "List";
					/** @description A list of parameters */
					value: components["schemas"]["NodeParameterValue"][];
			  }
			| {
					/** @enum {string} */
					parameter_type: "Map";
					/** @description A map from `String` to parameter */
					value: {
						[key: string]: components["schemas"]["NodeParameterValue"];
					};
			  };
		OutputPort: {
			/** @description The node that provides this output */
			node: string;
			/** @description The output's name */
			port: string;
		};
		/** @description Pipeline Information */
		PipelineInfo: {
			data: components["schemas"]["PipelineJson"];
			/**
			 * Format: int64
			 * @description The id of this user
			 */
			id: number;
			/** @description This user's name */
			name: string;
			/**
			 * Format: int64
			 * @description The user that owns this pipeline
			 */
			owned_by: number;
		};
		/** @description A pipeline specification, directly deserialized from JSON.
		 *     This is the first step in our pipeline processing workflow. */
		PipelineJson: {
			/** @description Edges in this pipeline */
			edges: {
				[key: string]: components["schemas"]["EdgeJson"];
			};
			/** @description Nodes in this pipeline */
			nodes: {
				[key: string]: components["schemas"]["NodeJson"];
			};
		};
		PrimaryAttrData:
			| {
					/** @enum {string} */
					type: "NotAvailable";
			  }
			| {
					/** Format: int64 */
					attr: number;
					/** @enum {string} */
					type: "Text";
					value: string;
			  }
			| {
					/** Format: int64 */
					attr: number;
					/** @enum {string} */
					type: "Integer";
					/** Format: int64 */
					value: number;
			  }
			| {
					/** Format: int64 */
					attr: number;
					/** @enum {string} */
					type: "Float";
					/** Format: double */
					value: number;
			  }
			| {
					/** Format: int64 */
					attr: number;
					/** @enum {string} */
					type: "Boolean";
					value: boolean;
			  }
			| {
					/** Format: int64 */
					attr: number;
					/** @enum {string} */
					type: "Hash";
					value: string;
			  }
			| {
					/** Format: int64 */
					attr: number;
					mime: string;
					/** Format: int64 */
					size?: number | null;
					/** @enum {string} */
					type: "Blob";
			  };
		QueuedJobCounts: {
			/** Format: int64 */
			build_errors: number;
			/** Format: int64 */
			failed_jobs: number;
			/** Format: int64 */
			queued_jobs: number;
			/** Format: int64 */
			running_jobs: number;
			/** Format: int64 */
			successful_jobs: number;
			/** Format: int64 */
			total_jobs: number;
		};
		QueuedJobInfoList: {
			counts: components["schemas"]["QueuedJobCounts"];
			jobs: components["schemas"]["QueuedJobInfoShort"][];
			/**
			 * Format: int64
			 * @description The number of jobs we skipped while paginating.
			 *     (i.e, the true index of the first job in `jobs`)
			 */
			skip: number;
		};
		QueuedJobInfoShort: {
			created_at: string;
			finished_at?: string | null;
			/** @description A unique id for this job */
			job_id: string;
			/**
			 * Format: int64
			 * @description The user that owns this job
			 */
			owned_by: number;
			started_at?: string | null;
			state: components["schemas"]["QueuedJobState"];
		};
		/** @description A queued job's state, as stored in the db */
		QueuedJobState:
			| {
					message: string;
					/** @enum {string} */
					state: "BuildError";
			  }
			| {
					/** @enum {string} */
					state: "Queued";
			  }
			| {
					/** @enum {string} */
					state: "Running";
			  }
			| {
					message: string;
					/** @enum {string} */
					state: "FailedRunning";
			  }
			| {
					/** @enum {string} */
					state: "Success";
			  };
		RenameAttributeRequest: {
			new_name: string;
		};
		RenameClassRequest: {
			new_name: string;
		};
		RenameDatasetRequest: {
			new_name: string;
		};
		RunPipelineRequest: {
			input: {
				[key: string]: components["schemas"]["ApiInputAttrData"];
			};
			/** @description A unique id for this job */
			job_id: string;
		};
		StartUploadRequest: {
			mime: string;
		};
		StartUploadResponse: {
			job_id: string;
			request_body_limit: number;
		};
		UpdatePipelineRequest: {
			new_data?: components["schemas"]["PipelineJson"] | null;
			new_name?: string | null;
		};
		UpdateUserRequest: {
			new_email?: string | null;
			new_name?: string | null;
			new_password?: string | null;
		};
		/** @description User Information */
		UserInfo: {
			/** @description This user's email */
			email: string;
			/**
			 * Format: int64
			 * @description The id of this user
			 */
			id: number;
			/** @description This user's name */
			name: string;
		};
	};
	responses: never;
	parameters: never;
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	get_attribute: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Attribute id */
				attribute_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Attribute info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["AttributeInfo"];
				};
			};
			/** @description Attribute not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	del_attribute: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Attribute id */
				attribute_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Attribute deleted successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	rename_attribute: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Attribute id */
				attribute_id: number;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RenameAttributeRequest"];
			};
		};
		responses: {
			/** @description Attribute renamed successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	get_class: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Class id */
				class_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Class info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ClassInfo"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Class not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	del_class: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description class id */
				class_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Class deleted successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	rename_class: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Class id */
				class_id: number;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RenameClassRequest"];
			};
		};
		responses: {
			/** @description Class renamed successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	add_attribute: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Class id */
				class_id: number;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["NewAttributeRequest"];
			};
		};
		responses: {
			/** @description Attribute created successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": number;
				};
			};
			/** @description Bad request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Dataset does not exist */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	list_items: {
		parameters: {
			query: {
				skip: number;
				count: number;
			};
			header?: never;
			path: {
				/** @description Class id */
				class_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Class info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["ItemListResponse"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Class not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	add_dataset: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["NewDatasetRequest"];
			};
		};
		responses: {
			/** @description Dataset created successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": number;
				};
			};
			/** @description Bad request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	list_datasets: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description This user's datasets */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DatasetInfo"][];
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	get_dataset: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Dataset id */
				dataset_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Dataset info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DatasetInfo"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Dataset not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	del_dataset: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Dataset id */
				dataset_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Dataset deleted successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	rename_dataset: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Dataset id */
				dataset_id: number;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RenameDatasetRequest"];
			};
		};
		responses: {
			/** @description Dataset renamed successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	add_class: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Dataset id */
				dataset_id: number;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["NewClassRequest"];
			};
		};
		responses: {
			/** @description Class created successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": number;
				};
			};
			/** @description Bad request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Dataset does not exist */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	get_attr: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Item id */
				item_idx: number;
				/** @description Attribute id */
				attr_idx: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description The attribute's data */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DatasetInfo"][];
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	list_jobs: {
		parameters: {
			query: {
				skip: number;
				count: number;
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description This user's jobs, ordered by age */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["QueuedJobInfoList"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	try_login: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["LoginRequest"];
			};
		};
		responses: {
			/** @description Successfully logged in */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Could not log in */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	logout: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Successfully terminated session */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Could not log out */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
		};
	};
	add_pipeline: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["NewPipelineRequest"];
			};
		};
		responses: {
			/** @description Pipeline created successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PipelineInfo"];
				};
			};
			/** @description Bad request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	list_pipelines: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description List of pipeline ids */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PipelineInfo"][];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	get_pipeline: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Pipeline id */
				pipeline_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Pipeline found */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PipelineInfo"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	del_pipeline: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Pipeline id */
				pipeline_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Pipeline deleted successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	update_pipeline: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Pipeline id */
				pipeline_id: number;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdatePipelineRequest"];
			};
		};
		responses: {
			/** @description Pipeline updated successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["PipelineInfo"];
				};
			};
			/** @description Invalid request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	run_pipeline: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Pipeline id */
				pipeline_id: number;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["RunPipelineRequest"];
			};
		};
		responses: {
			/** @description Job queued successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Job id already exists */
			409: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Job queue is full */
			429: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	start_upload: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["StartUploadRequest"];
			};
		};
		responses: {
			/** @description Upload started successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["StartUploadResponse"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	finish_upload: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Upload id */
				upload_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Upload finished successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Upload not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	upload_part: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Upload id */
				upload_id: string;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Part uploaded successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Upload job not found */
			404: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	add_user: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["NewUserRequest"];
			};
		};
		responses: {
			/** @description User created successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Bad request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	get_me: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Logged in user info */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["UserInfo"];
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	del_user: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: number;
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description User deleted successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
	update_user: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description User id */
				user_id: number;
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["UpdateUserRequest"];
			};
		};
		responses: {
			/** @description User updated successfully */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Invalid request */
			400: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"text/plain": string;
				};
			};
			/** @description Unauthorized */
			401: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
			/** @description Internal server error */
			500: {
				headers: {
					[name: string]: unknown;
				};
				content?: never;
			};
		};
	};
}
